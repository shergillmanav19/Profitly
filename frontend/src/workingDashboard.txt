//TODO: COMPONENTS SHOULD RENDER THEMSELVES NOT TOGETHER IN ONE FILES?????
//TODO: MULTIPLE RENDERS HAPPENING WHEN I CLIKC A BUTTON
import { React, useEffect, useState } from "react";
import { Line } from "react-chartjs-2";
import "./styles/Dashboard.css";
import { portfolioData } from "../../data/portfolioData";
import Buttons from "../buttons/Buttons";
import Graph from "../graph/Graph";
import PortfolioPositions from "../positions/PortfolioPositions";
import Watchlist from "../watchlist/Watchlist";
import { Button } from "@chakra-ui/react";
import AccountNames from "../accountNames/AccountNames";
export default function Dashboard() {
  // const [wsLoggedIn, setWsLoggedIn] = useState("Failed");
  // const [netDeposit, setNetDeposit] = useState({});
  // const [dates, setDates] = useState([]);
  // const [dataset, setDataset] = useState({});
  const [selectedButton, setSelectedButton] = useState("1m");
  // const [positionsData, setPositionsData] = useState([]);
  // const [watchlistData, setWatchlistData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [accountName, setAccountName] = useState("tfsa");
  // const [portfolioData, setPortfolioData] = useState({
  //   labels: [],
  //   datasets: [{}],
  // });
  // useEffect(() => {
  //   setLoading(true);
  //refresh page because login didnt happen (could send an alert or something)
  // TODO: for now i have to bear with double login
  // const loginRequest = async () =>
  //   await fetch("/api/ws/login")
  //     .then((response) => {
  //       if (response.ok) {
  //         return response.json();
  //       } else {
  //         throw new Error("Something went wrong");
  //       }
  //     })
  //     .then((data) => setWsLoggedIn(data.status))
  //     .catch((error) => console.log(error));
  // loginRequest();

  // default to 1m and tfsa
  // fetch(`/api/ws/getHistoricalData/${selectedButton}/${accountName}`)
  //   .then((response) => {
  //     if (response.ok) {
  //       return response.json();
  //     } else {
  //       throw new Error("Something went wrong");
  //     }
  //   })
  //   .then((data) => {
  //     // setNetDeposit(data.ws_netDeposits);
  //     // setDates(data.ws_dates);
  //     // setDataset(data.ws_dataset);
  //     setPortfolioData({
  //       labels: data.ws_dates,
  //       datasets: [data.ws_dataset],
  //     });
  //   })
  //   .catch((error) => console.log(error));

  // get ws positions
  // fetch(`/api/ws/getPositions/${accountName}`)
  //   .then((response) => {
  //     if (response.ok) {
  //       return response.json();
  //     } else {
  //       throw new Error("Something went wrong");
  //     }
  //   })
  //   .then((data) => setPositionsData(data))
  //   .catch((error) => console.log(error));

  // get ws watchlist
  // fetch("/api/ws/getWatchlist")
  //   .then((response) => {
  //     if (response.ok) {
  //       return response.json();
  //     } else {
  //       throw new Error("Something went wrong");
  //     }
  //   })
  //   .then((data) => setWatchlistData(data))
  //   .catch((error) => console.log(error));
  // setLoading(false);
  // }, [accountName]);

  //Handles clicks for 1d,1w,1m....
  const handleTimeButtonClick = (e) => {
    setSelectedButton(e.target.value);
    //   fetch(`/api/ws/getHistoricalData/${e.target.value}/${accountName}`)
    //     .then((response) => {
    //       if (response.ok) {
    //         return response.json();
    //       } else {
    //         throw new Error("Something went wrong");
    //       }
    //     })
    //     .then((data) => {
    //       // setData(data.data);
    //       // setNetDeposit(data.ws_netDeposits);
    //       // setDates(data.ws_dates);
    //       // setDataset(data.ws_dataset);
    //       setPortfolioData({
    //         labels: data.ws_dates,
    //         datasets: [data.ws_dataset],
    //       });
    //     })
    //     .catch((error) => console.log(error));
  };

  //TODO: should only updates buttons/state not make calls
  //refer to above function

  //Handles clicks for which account type TFSA, RRSP, PERSONAL, or CRYPTO
  const handleAccountNameChange = (e) => {
    //   fetch(`/api/ws/getHistoricalData/${selectedButton}/${e.target.value}`)
    //     .then((response) => {
    //       if (response.ok) {
    //         return response.json();
    //       } else {
    //         throw new Error("Something went wrong");
    //       }
    //     })
    //     .then((data) => {
    //       // setData(data.data);
    //       setNetDeposit(data.ws_netDeposits);
    //       setDates(data.ws_dates);
    //       setDataset(data.ws_dataset);
    //     })
    //     .catch((error) => console.log(error));

    setAccountName(e.target.value);
  };
  return (
    <>
      {console.log(accountName)}
      <div className="container-graph">
        <Graph accountName={accountName} selectedButton={selectedButton} />
        <AccountNames handleChange={handleAccountNameChange} />
        <Buttons
          handleClick={handleTimeButtonClick}
          selectedButton={selectedButton}
        />
      </div>
      <div>
        <div className="wtch-pos-container">
          <PortfolioPositions accountName={accountName} />
          <Watchlist />
        </div>
      </div>
    </>
  );
}
